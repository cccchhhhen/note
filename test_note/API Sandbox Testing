环境（windows）

https://reqres.in/

- **Postman**：用于手动测试
- **Python + Requests**：用于自动化测试
- **JQ**：JSON数据验证（命令行）

### **二、具体测试场景实现**

#### **场景1：用户列表分页验证**

**测试目标**：验证分页参数是否有效

```py
# 场景1：用户列表分页验证
import requests


def test_user_list_pagination():
    # 请求第二页数据
    response = requests.get("https://reqres.in/api/users", params={"page": 2})

    # 验证状态码
    assert response.status_code == 200

    # 验证分页元数据
    data = response.json()
    assert data["page"] == 2
    assert data["per_page"] == 6
    assert data["total"] == 12

    # 验证用户数量
    assert len(data["data"]) == 6

    # 验证用户数据格式
    first_user = data["data"][0]
    assert "id" in first_user
    assert "email" in first_user
    assert "first_name" in first_user
```

手动验证：

```git
# 使用CURL + JQ验证
curl -s "https://reqres.in/api/users?page=2" | jq '
{
    page: .page,
    per_page: .per_page,
    total_users: .total,
    user_count: (.data | length),
    first_user_email: .data[0].email
}'
```

#### **场景2：创建用户功能测试**

**测试目标**：验证POST请求能否正确创建用户

```py
# 场景2：创建用户功能测试
def test_create_user():
    payload = {
        "name": "morpheus",
        "job": "leader"
    }
    # Free API Key
    headers = {
        "x-api-key": "reqres-free-v1"
    }

    response = requests.post("https://reqres.in/api/users", json=payload, headers=headers)

    # 验证响应格式
    assert response.status_code == 201
    created_user = response.json()
    assert "id" in created_user
    assert "createdAt" in created_user

    # 验证业务逻辑
    assert created_user["name"] == payload["name"]
    assert created_user["job"] == payload["job"]
```

**Postman测试步骤**：

1. 新建POST请求到`https://reqres.in/api/users`

2. Body选择raw JSON：

   ```json
   {
       "name": "neo",
       "job": "the one"
   }
   ```

3. 发送后验证：

   - Status Code = 201
   - 响应体包含生成的`id`和`createdAt`字段
   - 响应时间 < 500ms

#### **场景3：更新用户操作验证**

**测试目标**：验证PUT请求能否更新用户信息

```python
# 场景3：更新用户操作验证
def test_update_user():
    user_id = 2  # 已知存在的测试用户
    update_data = {
        "name": "morpheus",
        "job": "zion resident"
    }
    response = requests.put(f"https://reqres.in/api/users/{user_id}", json=update_data, headers=headers)

    # 验证更新结果
    assert response.status_code == 200
    updated_user = response.json()
    assert updated_user["name"] == update_data["name"]
    assert updated_user["job"] == update_data["job"]
    assert "updatedAt" in updated_user
```



**边界测试**:

```py
# 边界测试 : 不成功，没有定义该接口
def test_update_nonexistent_user():
    response = requests.put("https://reqres.in/api/users/999", json={"name": "test"}, headers=headers)
    assert response.status_code == 404
```

#### **场景4：删除功能验证**

**测试目标**：验证DELETE操作是否幂等

```py
# 场景4：删除功能验证
def test_delete_user():
    user_id = 2

    # 第一次删除
    response = requests.delete(f"https://reqres.in/api/users/{user_id}", headers=headers)
    assert response.status_code == 204

    # 第二次删除（验证幂等性）
    response = requests.delete(f"https://reqres.in/api/users/{user_id}", headers=headers)
    assert response.status_code == 204
```

>### **HTTP DELETE 方法的幂等性**
>
>根据 RFC 7231 规范，DELETE 方法具有幂等性：
>
>- **第一次删除**：资源存在，删除成功 → **204**
>- **第二次删除**：资源已不存在，但 DELETE 操作仍然被视为成功 → **204**
>
>这是符合 HTTP 规范的实现方式，因为多次调用 DELETE 的最终状态一致（资源不存在）

### **对比其他实现方式**

|        实现方式        | 第一次删除 | 第二次删除 | 幂等性 |        典型场景        |
| :--------------------: | :--------: | :--------: | :----: | :--------------------: |
|    **始终返回 204**    |    204     |    204     |   是   | Reqres.in、部分云服务  |
| **首次 204，后续 404** |    204     |    404     |   否   | 严格遵循资源状态的 API |



### **高级测试技巧**

#### 1. **数据驱动测试**

```py
# 数据驱动测试 测试用户邮箱
test_data = [
    (7, "michael.lawson@reqres.in"),
    (8, "lindsay.ferguson@reqres.in"),
    (9, "tobias.funke@reqres.in")
]

@pytest.mark.parametrize("user_id,expected_email", test_data)
def test_user_emails(user_id, expected_email):
    response = requests.get(f"https://reqres.in/api/users/{user_id}", headers=headers)
    print(response)
    assert response.json()["data"]["email"] == expected_email
```

#### 2. **响应时间监控**

```py
# 响应时间监控
def test_api_performance():
    url = f"https://reqres.in/api/users?delay=1"

    # 发送请求并计时
    response = requests.get(url, headers=headers)

    # 验证请求成功
    assert response.status_code == 200, f"认证失败，请检查API密钥。响应内容：{response.text}"

    # 计算实际耗时
    elapsed_time = response.elapsed.total_seconds()
    print(f"实际响应时间：{elapsed_time:.2f}秒")

    # 设置合理阈值（1秒延迟 + 10%误差 + 网络缓冲）
    expected_max_time = 1.1 + 0.6  # 根据实际网络情况调整0.6秒缓冲值

    assert elapsed_time < expected_max_time, \
        f"响应时间过长！预期 <{expected_max_time}秒，实际 {elapsed_time:.2f}秒"
```

>|     属性/方法      |                             说明                             |
>| :----------------: | :----------------------------------------------------------: |
>| `response.elapsed` | 返回 `datetime.timedelta` 对象，表示请求从发送到响应头到达的耗时 |
>| `.total_seconds()` |  将 `timedelta` 转换为总秒数（精确到毫秒级，如 `1.234` 秒）  |

>### 关键特性
>
>#### 1. **测量范围**
>
>- **起点**：请求第一个字节开始发送（建立连接后）
>- **终点**：响应头接收完成（**不包含接收响应体的时间**）
>- **注意**：若使用流式请求（`stream=True`），响应体接收时间不计入

### 扩展建议

#### 1. 模拟高并发场景

```py
from concurrent.futures import ThreadPoolExecutor
# 扩展 模拟高并发场景 避免网络抖动的影响
# 使用locust或pytest-asyncio进行压力测试
def test_concurrent_performance():
    url = f"https://reqres.in/api/users?delay=1"
    # 创建线程执行器
    with ThreadPoolExecutor() as executor:
        # 提交十个并发请求任务
        futures = [executor.submit(requests.get, url) for _ in range(10)]
        # 收集每个请求的耗时
        results = [f.result().elapsed.total_seconds() for f in futures]
    # 计算平均响应时间
    avg_time = sum(results) / len(results)
    assert avg_time < 1.7  # 根据业务需求调整
```

>|              组件               |                        作用                        |
>| :-----------------------------: | :------------------------------------------------: |
>|      `ThreadPoolExecutor`       | 创建线程池，默认线程数为CPU核心数*5（Python 3.8+） |
>| `executor.submit(requests.get)` |        向线程池提交HTTP GET任务，**非阻塞**        |
>|          `f.result()`           |             阻塞等待任务完成并获取结果             |
>|       `response.elapsed`        |        测量单个请求从发送到响应头接收的耗时        |

### 代码的局限性

#### 1. **并发模拟不够真实**

|          问题描述          |              后果              |                改进方案                |
| :------------------------: | :----------------------------: | :------------------------------------: |
| 使用多线程而非真实用户行为 | 无法模拟WebSocket/长连接等场景 |       使用Locust工具模拟用户行为       |
|      线程池受GIL限制       |      高并发时性能瓶颈明显      | 改用`aiohttp` + `pytest-asyncio`异步库 |

#### 2. **统计指标单一**

|    问题描述    |               后果               |       改进方案       |
| :------------: | :------------------------------: | :------------------: |
| 仅检查平均时间 | 忽略异常值（如某个请求耗时10秒） | 增加对最大耗时的断言 |
|  未监控错误率  |    无法识别部分请求失败的情况    |  添加响应状态码校验  |

#### 3. **缺乏资源监控**

|         问题描述         |                后果                |      改进方案      |
| :----------------------: | :--------------------------------: | :----------------: |
| 未跟踪服务器CPU/内存使用 | 无法判断性能问题是客户端还是服务端 | 集成Prometheus监控 |













### **在 Windows 中安装 curl 和 jq 的步骤**

#### 1. **安装 Chocolatey（需管理员权限）**

```powershell
Set-ExecutionPolicy Bypass -Scope Process -Force
iex ((New-Object System.Net.WebClient).DownloadString('https://chocolatey.org/install.ps1'))

# 验证
choco --version
# 安装 curl 和 jq
choco install curl jq -y
```

安装jq时出现网络问题，手动安装

下载[jq-win64.exe](https://github.com/jqlang/jq/releases/download/jq-1.7.1/jq-win64.exe)

```powershell
# 在PowerShell中执行（管理员权限）
mkdir -Force $env:ProgramFiles\jq
mv .\Downloads\jq-win64.exe $env:ProgramFiles\jq\jq.exe
```

在环境变量中添加%ProgramFiles%\jq，但是不成功，换成C:\Program Files\jq

验证jq --version







手动验证Git Bash


使用CURL + JQ验证

curl -s "https://reqres.in/api/users?page=2" | jq '
{
    page: .page,
    per_page: .per_page,
    total_users: .total,
    user_count: (.data | length),
    first_user_email: .data[0].email
}'

1. **curl 命令**：

   ```bash
   curl -s "https://reqres.in/api/users?page=2"
   ```

   - `-s`：静默模式（不显示进度条）
   - 输出原始 JSON 响应

2. **管道符 `|`**：

   - 将 `curl` 的输出传递给 `jq` 处理

   3.**jq 过滤**：

- `.page`：提取 `page` 字段值
- `.data | length`：计算 `data` 数组长度
- `.data[0].email`：获取第一个用户的邮箱